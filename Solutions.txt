

spark-shell --packages com.databricks:spark-csv_2.10:1.4.0

Problem1-: Get the name of the candidate who won the constituency, with the data being ordered in asc by state and dsc by the number of votes.
/* Function to corrrect the dataset*/
  def getSet(fields: String) : String = {
    var nul: StringBuilder = new StringBuilder()
    var str = ""
    if(fields.contains("NOTA")) {
      val index = "NOTA\t0\tNOTA\t"
      val fieldSplitted = fields.splitAt(fields.indexOf("NOTA"))
      nul.append(fieldSplitted._1).append(index).append(fieldSplitted._2)
      str = nul.toString()
      println(str)
    }
    else
      str = fields
    //println("rows ---"+str)
    str
  }
val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val firstresult = electionDF.groupBy("constituency").max("total").withColumnRenamed("max(total)","Maximum_Count").sort(asc("constituency"),desc("Maximum_Count"))
val correctedColumn = firstresult.withColumnRenamed("constituency","constituency_grouped")
val midResult = electionDF.join(correctedColumn,correctedColumn("constituency_grouped") === electionDF("constituency") && firstresult("Maximum_Count") === electionDF("total"),"inner")
val Answer1 = midResult.select("state","constituency_grouped","Maximum_Count","partyname","candidate_name").sort(asc("state"),desc("Maximum_Count"))
Answer1.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem1")

Problem2-:Get the name of candidate who got maximum number of votes in his state.

val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val secondresult = electionDF.groupBy("state").max("total").withColumnRenamed("max(total)","Maximum_Count").sort(asc("state"),desc("Maximum_Count"))
val stateColumn = secondresult.withColumnRenamed("state","state_grouped")
val midResult = electionDF.join(stateColumn,stateColumn("state_grouped") === electionDF("state") && secondresult("Maximum_Count") === electionDF("total"),"inner")
val Answer2 = midResult.select("state_grouped","constituency","Maximum_Count","partyname","candidate_name").sort(asc("state"),desc("Maximum_Count"))
Answer2.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem2")

hdfs dfs -get data-master/electionresults/output/problem2/part-00000 /home/manishtewari/data/data-master/electionresults/problem2.csv

problem 3-: Number of candidates won in terms of gender i.e. Male and Female


val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val thiredresult =  electionDF.groupBy("constituency").max("total").withColumnRenamed("max(total)","Maximum_Count").sort(asc("constituency"),desc("Maximum_Count"))
val correctedColumn = thiredresult.withColumnRenamed("constituency","constituency_grouped")
val midResult = electionDF.join(correctedColumn,correctedColumn("constituency_grouped") === electionDF("constituency") && thiredresult("Maximum_Count") === electionDF("total"),"inner")
val Answer3 = midResult.select("state","constituency_grouped","Maximum_Count","partyname","candidate_name","sex").groupBy("sex").count
Answer3.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem3")

Problem 4-: Most Number of voters appeared constituencywise.

val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val fourthresult =  electionDF.groupBy("constituency","state").sum("total").withColumnRenamed("sum(total)","Voters_Constituencywise").sort(desc("Voters_Constituencywise"))
fourthresult.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem4")

Problem 5 -: Number of winners belong to each party.

val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val firstresult = electionDF.groupBy("constituency").max("total").withColumnRenamed("max(total)","Maximum_Count").sort(asc("constituency"),desc("Maximum_Count"))
val correctedColumn = firstresult.withColumnRenamed("constituency","constituency_grouped")
val midResult = electionDF.join(correctedColumn,correctedColumn("constituency_grouped") === electionDF("constituency") && firstresult("Maximum_Count") === electionDF("total"),"inner")
val Answer5 = midResult.select("state","constituency_grouped","Maximum_Count","partyname","candidate_name").groupBy("partyname").count.sort(desc("count"))
Answer5.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem5")

Problem 6 -: Number of candidates won categorywise.

val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val firstresult = electionDF.groupBy("constituency").max("total").withColumnRenamed("max(total)","Maximum_Count").sort(asc("constituency"),desc("Maximum_Count"))
val correctedColumn = firstresult.withColumnRenamed("constituency","constituency_grouped")
val midResult = electionDF.join(correctedColumn,correctedColumn("constituency_grouped") === electionDF("constituency") && firstresult("Maximum_Count") === electionDF("total"),"inner")
val Answer6 = midResult.select("state","constituency_grouped","Maximum_Count","partyname","candidate_name","category").groupBy("category").count.sort(desc("count"))
Answer6.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem6")

Problem 7 -: Total Number of votes partysymbolwise.

val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val fifthresult =  electionDF.groupBy("partysymbol").sum("total").withColumnRenamed("sum(total)","partysymbolwise").sort(desc("partysymbolwise"))
fifthresult.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem7")

fifthresult.write.saveAsTable("PartySymbol27") ---write to hive table

Accessing Hive tables's data-:

import org.apache.spark.sql.hive.orc._
import org.apache.spark.sql._
val hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)
hiveContext.table("PartySymbol27")
hiveContext.sql("select * from PartySymbol27")

Problem 8 -:
val electionfile = sc.textFile("data-master/electionresults/ls2014.tsv").map(x => x.split("\t"))
case class election (state:String, constituency:String, candidate_name:String, sex:String,	age:String, category:String, partyname:String, partysymbol:String, general:Int, postal:Int, total:Int, pct_of_total_votes:Double, pct_of_polled_votes:Double, totalvoters:Int)
val electionDF = electionfile.map(x => election(x(0),x(1),x(2),x(3),x(4),x(5),x(6),x(7),x(8).toInt,x(9).toInt,x(10).toInt,x(11).toDouble,x(12).toDouble,x(13).toInt)).toDF()
val maxVotes = electionDF.groupBy("constituency").max("total").withColumnRenamed("max(total)","Maximum_Count")
val joinedDF = maxVotes.join(electionDF,electionDF("constituency") === maxVotes("constituency"),"left_outer").drop(maxVotes("constituency"))
val marginDF = joinedDF.withColumn("Win_Margin",abs(coalesce($"Maximum_Count",lit(0))-coalesce($"total",lit(0)))).filter("Win_Margin != 0").groupBy("constituency").agg(min("Win_Margin"), max("Maximum_Count")).withColumnRenamed("max(Maximum_Count)","Maximum_Count").withColumnRenamed("min(Win_Margin)","Margin").sort(desc("Margin")).withColumnRenamed("constituency","sortedConstituency")
val midResult = electionDF.join(marginDF,marginDF("sortedConstituency") === electionDF("constituency") && marginDF("Maximum_Count") === electionDF("total") ,"inner")
val Answer8 = midResult.select("state","partyname","constituency","candidate_name","category","Maximum_Count","Margin").sort(desc("Margin"))
Answer8.coalesce(1).write.format("com.databricks.spark.csv").option("header", "true").option("delimiter", ",").option("inferSchema", "true").save("data-master/electionresults/output/problem8")


//val marginDF = joinedDF.withColumn("Win_Margin",abs(coalesce($"Maximum_Count",lit(0))-coalesce($"total",lit(0)))).filter($"Win_Margin" = 0).groupBy("constituency").min("total").withColumnRenamed("min(total)","Margin")


 |-- state: string (nullable = true)
 |-- constituency: string (nullable = true)
 |-- candidate_name: string (nullable = true)
 |-- sex: string (nullable = true)
 |-- age: string (nullable = true)
 |-- category: string (nullable = true)
 |-- partyname: string (nullable = true)
 |-- partysymbol: string (nullable = true)
 |-- general: integer (nullable = false)
 |-- postal: integer (nullable = false)
 |-- total: integer (nullable = false)
 |-- pct_of_total_votes: double (nullable = false)
 |-- pct_of_polled_votes: double (nullable = false)
 |-- totalvoters: integer (nullable = false)
 |-- sortedConstituency: string (nullable = true)
 |-- Margin: integer (nullable = true)
 |-- Maximum_Count: integer (nullable = true)

